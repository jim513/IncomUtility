<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:IncomUtility"
        xmlns:syncfusion="http://schemas.syncfusion.com/wpf" xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" x:Class="IncomUtility.APP_UI_MonitorDeviceStatus"
        mc:Ignorable="d"
        Title="Monitor Device Status" Height="800" Width="1000">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="6*"/>
            <RowDefinition Height="4*"/>
            <RowDefinition Height="9*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="55*"/>
            <ColumnDefinition Width="5*"/>
            <ColumnDefinition Width="45*"/>
            <ColumnDefinition Width="50*"/>
        </Grid.ColumnDefinitions>
        <GroupBox Header="Switch Status" Grid.ColumnSpan="2" Margin="10,10,9.8,43.2" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="153*"/>
                    <ColumnDefinition Width="153*"/>
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0" Grid.ColumnSpan="1">
                    <Label Content="Up Button" Margin="0,2,0,0"/>
                    <Label Content="Down Button" Margin="0,2,0,0"/>
                    <Label Content="Inhibit Switch" Margin="0,2,0,0"/>
                    <Label Content="Sink/Source Switch" Margin="0,2,0,0"/>
                </StackPanel>
                <StackPanel Grid.Column="1">
                    <ComboBox x:Name="tCmb_UpButton" Margin="0,5,10.4,0" SelectedIndex="0">
                        <ComboBoxItem Content="REAEASED" />
                        <ComboBoxItem Content="PRESSED"/>
                    </ComboBox>
                    <ComboBox x:Name="tCmb_DownButton" Margin="0,5,10.4,0" SelectedIndex="0">
                        <ComboBoxItem Content="RELEASED" />
                        <ComboBoxItem Content="PRESSED"/>
                    </ComboBox>
                    <ComboBox x:Name="tCmb_InhibitSwitch" Margin="0,5,10.4,0" SelectedIndex="0">
                        <ComboBoxItem Content="0x00 : 4mA or 17.4mA"/>
                        <ComboBoxItem Content="0x00 : 2mA"/>
                    </ComboBox>
                    <ComboBox x:Name="tCmb_SinkSourceSwitchs" Margin="0,5,10.4,0" SelectedIndex="0">
                        <ComboBoxItem Content="Unknown"/>
                        <ComboBoxItem Content="Sink"/>
                        <ComboBoxItem Content="Source"/>
                    </ComboBox>
                    <Button x:Name="tBtn_ReadSwitchStauts" Content="Read Switch Status" Margin="10,10,20,0" Height="25" Click="tBtn_ReadSwitchStauts_Click"/>
                </StackPanel>
            </Grid>
        </GroupBox>
        <GroupBox Header="Instrument Time" Margin="10,222,9.8,44.6" Grid.ColumnSpan="2" Grid.RowSpan="2">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1*"/>
                    <ColumnDefinition Width="1*"/>
                </Grid.ColumnDefinitions>
                <DatePicker x:Name="tDate_DatePicker" SelectedDate="2008,01,01" HorizontalAlignment="Left" Margin="10,26,0,0" VerticalAlignment="Top" Height="25" Width="146"/>

                <xctk:TimePicker x:Name="tTime_TimePicker" Grid.Column="1" HorizontalAlignment="Left" Height="25" Margin="10.6,26,0,0"  VerticalAlignment="Top" Width="145" Format="LongTime"  DefaultValue="05/20/2020 12:00:00" DisplayDefaultValueOnEmptyText="True"/>
                <Button x:Name="tBtn_ReadTime" Content="Read Time" HorizontalAlignment="Left" Margin="81,62,0,0" VerticalAlignment="Top" Width="100" Height="30" Grid.ColumnSpan="2" Click="tBtn_ReadTime_Click" />
                <Button x:Name="tBtn_SetTime" Content="Set Time" Grid.Column="1" HorizontalAlignment="Left" Margin="33.6,62,0,0" VerticalAlignment="Top" Width="100" Height="30" Click="tBtn_SetTime_Click"/>

            </Grid>
        </GroupBox>
        <TextBox x:Name="tTxt_Memo1" Grid.Column="3" Grid.RowSpan="3" Margin="10,10,10,10" Text="Memo1" AcceptsReturn="True" TextWrapping="Wrap"/>
        <StackPanel Grid.Column="2" Margin="10.2,10,9.8,9.6"  Orientation="Vertical" Grid.RowSpan="2">
            <DataGrid x:Name="instrument_status_grid_data" AutoGenerateColumns="False" AlternationCount="2" IsReadOnly="True">
                <DataGrid.ColumnHeaderStyle >
                    <Style TargetType = "{x:Type DataGridColumnHeader}" >
                        <Setter Property = "HorizontalContentAlignment" Value = "Center" />
                    </Style>
                </DataGrid.ColumnHeaderStyle>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Instrunment Status" Binding="{Binding data1}" CanUserSort="False" Width="6*">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="{x:Type TextBlock}">
                                <Style.Triggers>
                                    <Trigger Property="Text" Value="Normal">
                                        <Setter Property="Background" Value="LightGreen"/>
                                    </Trigger>
                                    <Trigger Property="Text" Value="Fault">
                                        <Setter Property="Background" Value="Red"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="Value" Binding="{Binding data2}" CanUserSort="False" Width="4*">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="{x:Type TextBlock}">
                                <Style.Triggers>
                                    <Trigger Property="Text" Value="Normal">
                                        <Setter Property="Background" Value="LightGreen"/>
                                    </Trigger>
                                    <Trigger Property="Text" Value="Fault">
                                        <Setter Property="Background" Value="Red"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                </DataGrid.Columns>
            </DataGrid>
            <Button x:Name="tBtn_ReadDeviceStatus" Margin="0,5,0,0" Height="25" Content="Read Device Status" Click="tBtn_ReadDeviceStatus_Click"/>
        </StackPanel>
        <DataGrid x:Name="fault_status_grid_data" Grid.Row="3"  Margin="10" AutoGenerateColumns="False" AlternationCount="2" IsReadOnly="True">
            <DataGrid.ColumnHeaderStyle >
                <Style TargetType = "{x:Type DataGridColumnHeader}" >
                    <Setter Property = "HorizontalContentAlignment" Value = "Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Fault Status" Binding="{Binding data1}" CanUserSort="False" Width="6*">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Style.Triggers>
                                <Trigger Property="Text" Value="Normal">
                                    <Setter Property="Background" Value="LightGreen"/>
                                </Trigger>
                                <Trigger Property="Text" Value="Fault">
                                    <Setter Property="Background" Value="Red"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Value" Binding="{Binding data2}" CanUserSort="False" Width="4*">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Style.Triggers>
                                <Trigger Property="Text" Value="Normal">
                                    <Setter Property="Background" Value="LightGreen"/>
                                </Trigger>
                                <Trigger Property="Text" Value="Fault">
                                    <Setter Property="Background" Value="Red"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
            </DataGrid.Columns>
        </DataGrid>

        <DataGrid x:Name="warning_status_grid_data" Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="2" Margin="10" AutoGenerateColumns="False" AlternationCount="2" IsReadOnly="True" >
            <DataGrid.ColumnHeaderStyle >
                <Style TargetType = "{x:Type DataGridColumnHeader}" >
                    <Setter Property = "HorizontalContentAlignment" Value = "Center" />
                </Style>
            </DataGrid.ColumnHeaderStyle>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Warning Status" Binding="{Binding data1}" CanUserSort="False" Width="6*">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Style.Triggers>
                                <Trigger Property="Text" Value="Normal">
                                    <Setter Property="Background" Value="LightGreen"/>
                                </Trigger>
                                <Trigger Property="Text" Value="Fault">
                                    <Setter Property="Background" Value="Red"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Value" Binding="{Binding data2}" CanUserSort="False" Width="4*">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Style.Triggers>
                                <Trigger Property="Text" Value="Normal">
                                    <Setter Property="Background" Value="LightGreen"/>
                                </Trigger>
                                <Trigger Property="Text" Value="Fault">
                                    <Setter Property="Background" Value="Red"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
            </DataGrid.Columns>
        </DataGrid>

    </Grid>
</Window>
